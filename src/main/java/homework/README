Работа, проделанная над проектом в соответствии с принципами SOLID:
1) Убрала из класса User метод save и метод report в соответствии с принципом единственной ответственности: никогда не должно быть больше одной причины изменить класс.
Класс User теперь отвечает только за работу с личной информацией пользователя. Метод save перенесла в класс Persister, а метод report в UserReport.
2) На примере класса UsersNoEmail хотела показать действие принципа октрытости/закрытости: классы открыты для расширения, но закрыты для изменения.
Расширила класс User для работы с пользователями, не имеющими электронной почты, но при этом сам класс User не претерпел.
В классе UsersNoEmail был также переопределен метод по сохранению почты (похожее переопределение метода я планирую сделать уже в другом классе для метода report).
При переопределении метода saveEmail в классе UsersNoEmail IDEA потребовала, чтобы я поставила return null, и только после этого перестала показывать ошибку.
Подскажите, пожалуйста, как улучшить этот момент, чтобы не выводилось null.
3) Также (на мой взгляд) реализуется принцип Лисков: объекты в программе можно заменить их наследниками без изменения свойств программы.
Например, в случае с классами User и UsersNoEmail. При этом не нарушен метод разделения интерфейсы, все методы используются.
4) Однако в коде достаточно много повторений. Это особенно, как мне кажется, видно в Main.
Не могли бы Вы, пожалуйста, подсказать, как можно этот момент улучшить?